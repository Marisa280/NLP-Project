import streamlit as st
import pandas as pd

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
@st.cache_data
def load_data():
    data = pd.read_csv(r"C:\Users\Windows\Desktop\65160280\year_3\semester2\nlp\reccommend_menu\data_clean.csv")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    print(data.columns)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô DataFrame
    # ‡πÅ‡∏õ‡∏•‡∏á price_level ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏≤‡∏ó"
    data['price_level'] = data['price_level'].str.replace(' ‡∏ö‡∏≤‡∏ó', '').map({
        "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100": 1,
        "100-250": 2,
        "251-500": 3,
        "501-1,000": 4,
        "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1,000": 5
    })
    return data

def filter_data(data, keyword, price_type):
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'name' ‡πÅ‡∏ó‡∏ô 'menu' ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    filtered_data = data[data['name'].str.contains(keyword, case=False, na=False)]
    
    # ‡πÅ‡∏õ‡∏•‡∏á price_level ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    price_map = {
        "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100": 1,
        "100-250": 2,
        "251-500": 3,
        "501-1,000": 4,
        "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1,000": 5
    }
    selected_price = price_map.get(price_type, None)
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
    if selected_price is not None:
        filtered_data = filtered_data[filtered_data["price_level"] == selected_price]

    return filtered_data

def main():
    st.set_page_config(page_title="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö", page_icon="ü•ô")

    st.markdown("""
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600&display=swap');
        * {
            font-family: 'Kanit', sans-serif;
        }
        .stTextInput, .stNumberInput, .stButton > button {
            border-radius: 10px;
            font-size: 16px;
        }
        .stButton > button {
            background-color: #ff7043;
            color: white;
            border: none;
        }
        .stButton > button:hover {
            background-color: #ff5722;
        }
        h1 {
            font-family: 'Kanit', sans-serif !important;   
            font-weight: 600;
        }
        .stMarkdown, .stText {
            font-size: 14px;
        }
        .stSelectbox, .stTextInput {
            font-size: 16px;
        }
        .result-card {
            background-color: #ffecb3;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .result-card h3 {
            font-size: 18px;
            color: #ff5722;
        }
        .result-card p {
            font-size: 14px;
            color: #5a5a5a;
        }
        </style>
    """, unsafe_allow_html=True)

    st.title("ü•û ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏ô‡∏π")

    data = load_data()

    keyword = st.text_input("üîç ‡πÉ‡∏™‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
    
    price_type = st.selectbox("üíµ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", ["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100", "100-250", "251-500", "501-1,000", "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1,000"])

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    num_results = st.selectbox("üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á", [5, 10, 15, 20])

    if st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π"):
        if keyword:
            results = filter_data(data, keyword, price_type)
            if not results.empty:
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                results = results.head(num_results)
                st.success(f"üîç ‡∏û‡∏ö {len(results)} ‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                for _, row in results.iterrows():
                    st.markdown(f"""
                    <div class="result-card">
                        <h3>üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô: {row["name"]}</h3>
                        <p><strong>üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:</strong> {row["price_level"]} ‡∏ö‡∏≤‡∏ó</p>
                        <p><strong>üçΩ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> {row["category"]}</p>
                        <p><strong>üîó ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô:</strong> <a href="{row["url"]}" target="_blank">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</a></p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        else:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

if __name__ == "__main__":   
    main()
